// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: teams_users.sql

package database

import (
	"context"
	"database/sql"
)

const addUsertoTeam = `-- name: AddUsertoTeam :execresult
INSERT INTO teams_users(user_id, team_id)
VALUES (?, ?)
`

type AddUsertoTeamParams struct {
	UserID string
	TeamID string
}

func (q *Queries) AddUsertoTeam(ctx context.Context, arg AddUsertoTeamParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, addUsertoTeam, arg.UserID, arg.TeamID)
}

const getAllTeamsByUser = `-- name: GetAllTeamsByUser :many
SELECT team_id, user_id FROM teams_users
WHERE user_id = ?
`

func (q *Queries) GetAllTeamsByUser(ctx context.Context, userID string) ([]TeamsUser, error) {
	rows, err := q.db.QueryContext(ctx, getAllTeamsByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TeamsUser
	for rows.Next() {
		var i TeamsUser
		if err := rows.Scan(&i.TeamID, &i.UserID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllUsersFromTeam = `-- name: GetAllUsersFromTeam :many
SELECT team_id, user_id FROM teams_users
WHERE team_id = ?
`

func (q *Queries) GetAllUsersFromTeam(ctx context.Context, teamID string) ([]TeamsUser, error) {
	rows, err := q.db.QueryContext(ctx, getAllUsersFromTeam, teamID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TeamsUser
	for rows.Next() {
		var i TeamsUser
		if err := rows.Scan(&i.TeamID, &i.UserID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOneUserFromTeam = `-- name: GetOneUserFromTeam :one
SELECT team_id, user_id FROM teams_users
WHERE user_id = ?
AND team_id = ?
`

type GetOneUserFromTeamParams struct {
	UserID string
	TeamID string
}

func (q *Queries) GetOneUserFromTeam(ctx context.Context, arg GetOneUserFromTeamParams) (TeamsUser, error) {
	row := q.db.QueryRowContext(ctx, getOneUserFromTeam, arg.UserID, arg.TeamID)
	var i TeamsUser
	err := row.Scan(&i.TeamID, &i.UserID)
	return i, err
}

const removeUserFromTeam = `-- name: RemoveUserFromTeam :execresult
DELETE FROM teams_users
WHERE user_id = ?
AND team_id = ?
`

type RemoveUserFromTeamParams struct {
	UserID string
	TeamID string
}

func (q *Queries) RemoveUserFromTeam(ctx context.Context, arg RemoveUserFromTeamParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, removeUserFromTeam, arg.UserID, arg.TeamID)
}
