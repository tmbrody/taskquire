// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: orgs.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const createOrg = `-- name: CreateOrg :execresult
INSERT INTO orgs(id, name, description, owner_id, created_at, updated_at)
VALUES (?, ?, ?, ?, ?, ?)
`

type CreateOrgParams struct {
	ID          string
	Name        string
	Description string
	OwnerID     string
	CreatedAt   time.Time
	UpdatedAt   time.Time
}

func (q *Queries) CreateOrg(ctx context.Context, arg CreateOrgParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createOrg,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.OwnerID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
}

const deleteOrg = `-- name: DeleteOrg :execresult
DELETE FROM orgs
WHERE id = ?
`

func (q *Queries) DeleteOrg(ctx context.Context, id string) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteOrg, id)
}

const getAllOrgs = `-- name: GetAllOrgs :many
SELECT id, name, created_at, updated_at, description, owner_id FROM orgs
`

func (q *Queries) GetAllOrgs(ctx context.Context) ([]Org, error) {
	rows, err := q.db.QueryContext(ctx, getAllOrgs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Org
	for rows.Next() {
		var i Org
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Description,
			&i.OwnerID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrgByName = `-- name: GetOrgByName :one
SELECT id, name, created_at, updated_at, description, owner_id FROM orgs
WHERE name = ?
`

func (q *Queries) GetOrgByName(ctx context.Context, name string) (Org, error) {
	row := q.db.QueryRowContext(ctx, getOrgByName, name)
	var i Org
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Description,
		&i.OwnerID,
	)
	return i, err
}

const updateOrg = `-- name: UpdateOrg :execresult
UPDATE orgs
SET name = ?, description = ?, updated_at = ?
WHERE id = ?
`

type UpdateOrgParams struct {
	Name        string
	Description string
	UpdatedAt   time.Time
	ID          string
}

func (q *Queries) UpdateOrg(ctx context.Context, arg UpdateOrgParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateOrg,
		arg.Name,
		arg.Description,
		arg.UpdatedAt,
		arg.ID,
	)
}
