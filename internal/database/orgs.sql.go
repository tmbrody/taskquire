// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: orgs.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const createOrg = `-- name: CreateOrg :execresult
INSERT INTO orgs(id, name, created_at, updated_at)
VALUES (?, ?, ?, ?)
`

type CreateOrgParams struct {
	ID        string
	Name      string
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) CreateOrg(ctx context.Context, arg CreateOrgParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createOrg,
		arg.ID,
		arg.Name,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
}

const getAllOrgs = `-- name: GetAllOrgs :many
SELECT id, name, created_at, updated_at FROM orgs
`

func (q *Queries) GetAllOrgs(ctx context.Context) ([]Org, error) {
	rows, err := q.db.QueryContext(ctx, getAllOrgs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Org
	for rows.Next() {
		var i Org
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
